--- a/src/loadlib.c
+++ b/src/loadlib.c
@@ -23,6 +23,7 @@
 #include "lauxlib.h"
 #include "lualib.h"
 
+#include "windows_utf8_support.h"
 
 /*
 ** LUA_IGMARK is a mark to ignore all before it when building the
@@ -261,11 +262,11 @@
 ** variables that Lua check to set its paths.
 */
 #if !defined(LUA_PATH_VAR)
-#define LUA_PATH_VAR    "LUA_PATH"
+#define LUA_PATH_VAR    "LUA_PATH_x64"
 #endif
 
 #if !defined(LUA_CPATH_VAR)
-#define LUA_CPATH_VAR   "LUA_CPATH"
+#define LUA_CPATH_VAR   "LUA_CPATH_x64"
 #endif
 
 
@@ -414,7 +415,7 @@
 
 
 static int readable (const char *filename) {
-  FILE *f = fopen(filename, "r");  /* try to open file */
+  FILE *f = fopen_utf8(filename, "r");  /* try to open file */
   if (f == NULL) return 0;  /* open failed */
   fclose(f);
   return 1;
--- a/src/liolib.c
+++ b/src/liolib.c
@@ -21,6 +21,7 @@
 
 #include "lauxlib.h"
 #include "lualib.h"
+#include "windows_utf8_support.h"
 
 
 
@@ -61,7 +62,7 @@
 
 #elif defined(LUA_USE_WINDOWS)	/* }{ */
 
-#define l_popen(L,c,m)		(_popen(c,m))
+#define l_popen(L,c,m)		(popen_utf8(c,m))
 #define l_pclose(L,file)	(_pclose(file))
 
 #else				/* }{ */
@@ -247,7 +248,7 @@
 
 static void opencheck (lua_State *L, const char *fname, const char *mode) {
   LStream *p = newfile(L);
-  p->f = fopen(fname, mode);
+  p->f = fopen_utf8(fname, mode);
   if (p->f == NULL)
     luaL_error(L, "cannot open file '%s' (%s)", fname, strerror(errno));
 }
@@ -259,7 +260,7 @@
   LStream *p = newfile(L);
   const char *md = mode;  /* to traverse/check mode */
   luaL_argcheck(L, l_checkmode(md), 2, "invalid mode");
-  p->f = fopen(filename, mode);
+  p->f = fopen_utf8(filename, mode);
   return (p->f == NULL) ? luaL_fileresult(L, 0, filename) : 1;
 }
 
--- a/src/lauxlib.c
+++ b/src/lauxlib.c
@@ -26,6 +26,7 @@
 
 #include "lauxlib.h"
 
+#include "windows_utf8_support.h"
 
 /*
 ** {======================================================
@@ -712,7 +713,7 @@
   }
   else {
     lua_pushfstring(L, "@%s", filename);
-    lf.f = fopen(filename, "r");
+    lf.f = fopen_utf8(filename, "r");
     if (lf.f == NULL) return errfile(L, "open", fnameindex);
   }
   if (skipcomment(&lf, &c))  /* read initial portion */
--- a/src/lua.hpp
+++ b/src/lua.hpp
@@ -2,8 +2,16 @@
 // Lua header files for C++
 // <<extern "C">> not supplied automatically because Lua also compiles as C++
 
+#ifdef  __cplusplus
 extern "C" {
+#endif
 #include "lua.h"
 #include "lualib.h"
 #include "lauxlib.h"
+
+LUA_API void Z_luaC_checkGC(lua_State* L);
+LUA_API const char *Z_luaO_pushvfstring(lua_State *L, const char *fmt, va_list argp);
+
+#ifdef  __cplusplus
 }
+#endif
